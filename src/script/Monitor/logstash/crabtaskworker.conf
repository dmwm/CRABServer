input {
  beats {
    port => 5044
  }
}

filter{
  if [message] =~ /.*completed in.*/ {
      grok{
        match => {
          #2020-10-21 00:11:41,973:DEBUG:Worker,111:Process-6: KILL work on 201020_214355:mimacken_crab_2017_LFVAnalysis_SingleEle_F completed in 2 seconds: Status: OK
          "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:DEBUG:Worker,%{INT}:Process-%{NOTSPACE:slaveID}: %{NOTSPACE:workType} work on %{NOTSPACE:taskName} completed in %{NUMBER:completionTime:int} seconds"
        }
        add_field => {"log_type" => "work_on_task_completed"}
        overwrite => ["message"]
      }
  } else if [message] =~ /.*Starting.*at.*on.*/ {
      grok{
        match => {
          #2020-09-10 04:56:49,748:DEBUG:Worker,104:Process-6: Starting <function handleResubmit at 0x7f65ea4b5b90> on 200901_130305:wjang_crab_NanoAODv7_v0_QCD_HT2000toInf_TuneCUETP8M1_13TeV-madgraphMLM-pythia8
          "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:DEBUG:Worker,%{INT}:Process-%{NOTSPACE:slaveID}: Starting <function %{NOTSPACE:functionName} at %{DATA:taskID}> on %{NOTSPACE:taskName}"
        }
        add_field => {"log_type" => "start_new_task"}
        overwrite => ["message"]
      }
  } else if [message] =~ /.*Finished.*object at .*/ {
      grok{
        match => {
          #2020-09-10 04:48:50,091:INFO:Handler,104:Finished <TaskWorker.Actions.MyProxyLogon.MyProxyLogon object at 0x7f65e821a610> on 200901_125412:wjang_crab_NanoAODv7_v0_QCD_HT700to1000_TuneCUETP8M1_13TeV-madgraphMLM-pythia8 in 1 seconds
          "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:INFO:Handler,%{INT}:Finished <TaskWorker.Actions.%{NOTSPACE:action} object at %{DATA:taskID}> on %{NOTSPACE:taskName} in %{NUMBER:completionTime:int} seconds"
        }
        add_field => {"log_type" => "action_on_task_finished"}
        overwrite => ["message"]
      }
  } else { drop { } }

  date {
      match => ["timestamp_temp", "YYYY-MM-dd HH:mm:ss,SSS"]
      target => "timestamp_str"
  }
  ruby { code => "event.set('timestamp', (event.get('timestamp_str').to_f * 1000).to_i)" }
  ruby { code => "event.set('producer_time', (event.get('@timestamp').to_f * 1000).to_i)" }
}



output {
  if [log_type] == "work_on_task_completed" {
    http {
        http_method => post
        url => "http://monit-logs.cern.ch:10012/"
        #url => "http://localhost:9200/crabtw-%{+YYYY.MM.dd}/_doc" #this should be used to send data to local instance of ES
        content_type => "application/json; charset=UTF-8"
        format => "message"
        message => '{"producer": "crab", "type": "crabtaskworker", "timestamp":"%{timestamp}", "producer_time":"%{producer_time}", "log_type":"%{log_type}", "slaveID": "%{slaveID}", "workType": "%{workType}", "taskName": "%{taskName}", "completionTime": "%{completionTime}"}'
     }
   }

  if [log_type] == "start_new_task" {
    http {
        http_method => post
        url => "http://monit-logs.cern.ch:10012/"
        #url => "http://localhost:9200/crabtw-%{+YYYY.MM.dd}/_doc"
        content_type => "application/json; charset=UTF-8"
        format => "message"
        message => '{"producer": "crab", "type": "crabtaskworker", "timestamp":"%{timestamp}", "producer_time":"%{producer_time}", "log_type":"%{log_type}", "slaveID": "%{slaveID}", "functionName": "%{functionName}", "taskID": "%{taskID}", "taskName": "%{taskName}"}'
     }
   }


  if [log_type] == "action_on_task_finished" {
    http {
        http_method => post
        url => "http://monit-logs.cern.ch:10012/"
        #url => "http://localhost:9200/crabtw-%{+YYYY.MM.dd}/_doc"
        content_type => "application/json; charset=UTF-8"
        format => "message"
        message => '{"producer": "crab", "type": "crabtaskworker", "timestamp":"%{timestamp}", "producer_time":"%{producer_time}", "log_type":"%{log_type}", "action": "%{action}", "taskID": "%{taskID}","completionTime": "%{completionTime}", "taskName": "%{taskName}"}'
     }
   }

}
