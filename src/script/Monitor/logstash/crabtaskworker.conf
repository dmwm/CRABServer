input {
  beats {
    port => 5044
  }
}

filter{

  mutate { add_field => {
        "hostname" => "%{[cloud][instance][name]}"
        "log_file" => "%{[log][file][path]}"
        }
    }

  if [message] =~ /.*completed in.*/ {
      grok{
        match => {
          #2020-10-21 00:11:41,973:DEBUG:Worker,111:Process-6: KILL work on 201020_214355:mimacken_crab_2017_LFVAnalysis_SingleEle_F completed in 2 seconds: Status: OK
          "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:DEBUG:Worker,%{INT}:Process-%{NOTSPACE:slaveID}: %{NOTSPACE:workType} work on %{NOTSPACE:taskName} completed in %{NUMBER:completionTime:int} seconds"
        }
        add_field => {"log_type" => "work_on_task_completed"}
        overwrite => ["message"]
      }


  } else if [message] =~ /.*PUBSTART.*/ {
      grok{
        match => {
	#2021-05-19 09:15:34,006:INFO:PublisherMaster,149:PUBSTART: {"max_slaves": 5, "dryRun": false, "asoworker": "schedd", "DBShost": "cmsweb-prod.cern.ch", "instance": "test2", "version": "v3.210514"}
         "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:PublisherMaster,%{INT}:PUBSTART:%{GREEDYDATA:publisher_json_data}"
        }
        add_field => {"log_type" => "publisher_config_data"}
        overwrite => ["message"]
      }


  } else if [message] =~ /.*TWSTART.*/ {
      grok{
        match => {
	#2021-05-25 18:50:55,460:INFO:MasterWorker,174:TWSTART: {"restHost": "X", "name": "Y", "recurringActions": ["RemovetmpDir", "BanDestinationSites", "TapeRecallStatus"], "DBSHostName": "Z", "instance": "other", "version": "development", "dbInstance": "dev", "nslaves": 1}
         "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:MasterWorker,%{INT}:TWSTART: %{GREEDYDATA:tw_json_data}"
        } 
        add_field => {"log_type" => "tw_config_data"}
        overwrite => ["message"]
      }


  } else if [message] =~ /.*Starting.*at.*on.*/ {
      grok{
        match => {
          #2020-09-10 04:56:49,748:DEBUG:Worker,104:Process-6: Starting <function handleResubmit at 0x7f65ea4b5b90> on 200901_130305:wjang_crab_NanoAODv7_v0_QCD_HT2000toInf_TuneCUETP8M1_13TeV-madgraphMLM-pythia8
          "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:DEBUG:Worker,%{INT}:Process-%{NOTSPACE:slaveID}: Starting <function %{NOTSPACE:functionName} at %{DATA:taskID}> on %{NOTSPACE:taskName}"
        }
        add_field => {"log_type" => "start_new_task"}
        overwrite => ["message"]
      }

  } else if [message] =~ /.*blocks failed.*files.*/ {
      grok{
        match => {
          #2020-11-21 01:45:32,789:ERROR:PublisherMaster,550:Taskname 201118_182833:vcepaiti_crab_QCD_Pt-80to120_EMEnriched_TuneCUETP8M1_13TeV_pythia8-2016_NANOX_201117 : 1 blocks failed for a total of 11 files
          "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:PublisherMaster,%{INT}:Taskname %{NOTSPACE:taskName} : %{INT:blocks} blocks failed for a total of %{INT:files} files"
        }
        add_field => {"log_type" => "failed_publication"}
        overwrite => ["message"]
      }

  } else if  [message] =~ /.*Published.*files in.*/ {
      grok{
        match => {
          #2020-11-27 14:25:16,191:INFO:PublisherMaster,545:Taskname 201127_011713:anstahll_crab_AODSkim_HIMinimumBias14_HIRun2018_04Apr2019_DiMuMassMin2_20201117 is OK. Published 37 files in 1 blocks.
          "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:PublisherMaster,%{INT}:Taskname %{NOTSPACE:taskName} is %{NOTSPACE:publicationResult}. Published %{INT:filesPublished} files in %{INT:blocks} blocks."
        }
        add_field => {"log_type" => "successful_publication"}
        overwrite => ["message"]
      }

  } else if [message] =~ /.*Exception.*TaskPublish.*/ {
      grok{
        match => {
          #2020-11-26 19:23:27,737:ERROR:PublisherMaster,554:Exception when calling TaskPublish!
          "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:PublisherMaster,%{INT}:%{GREEDYDATA:exceptionHandled}"
        }
        add_field => {"log_type" => "publication_error"}
        overwrite => ["message"]
      }

  # this filter mathces changes in #6861, which is already in preprod and dev
  } else if [message] =~ /.*acquired_files.*/ {
      grok{
        match => {
          # 2021-12-03 20:13:59,965:DEBUG:PublisherMaster,413:acquired_files:   OK    89 : 211203_174945:cmsbot_crab_20211203_184942
          "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:%{NOTSPACE:logMsg}:PublisherMaster,%{INT}:acquired_files:%{SPACE}%{NOTSPACE:acquiredFilesStatus}%{SPACE}%{INT:acquiredFiles}%{SPACE}:%{SPACE}%{NOTSPACE:taskName}"
        }
        add_field => {"log_type" => "acquired_files_status"}
        overwrite => ["message"]
      }


  } else if [message] =~ /.*Finished.*object at .*/ {
      grok{
        match => {
          #2020-09-10 04:48:50,091:INFO:Handler,104:Finished <TaskWorker.Actions.MyProxyLogon.MyProxyLogon object at 0x7f65e821a610> on 200901_125412:wjang_crab_NanoAODv7_v0_QCD_HT700to1000_TuneCUETP8M1_13TeV-madgraphMLM-pythia8 in 1 seconds
          "message" => "%{TIMESTAMP_ISO8601:timestamp_temp}:INFO:Handler,%{INT}:Finished <TaskWorker.Actions.%{NOTSPACE:action} object at %{DATA:taskID}> on %{NOTSPACE:taskName} in %{NUMBER:completionTime:int} seconds"
        }
        add_field => {"log_type" => "action_on_task_finished"}
        overwrite => ["message"]
      }
  } else { drop { } }

  date {
      match => ["timestamp_temp", "YYYY-MM-dd HH:mm:ss,SSS"]
      target => "timestamp_str"
  }
  ruby { code => "event.set('timestamp', (event.get('timestamp_str').to_f * 1000).to_i)" }
  ruby { code => "event.set('producer_time', (event.get('@timestamp').to_f * 1000).to_i)" }
  ruby { code => "event.set('rec_timestamp', (event.get('timestamp_str').to_f * 1000).to_i)" }

  if [publisher_json_data] {
  	json{
    		source => "publisher_json_data"
    		target => "publisher_json_data"
  		}

    ruby {
        code => '
            event.get("publisher_json_data").each { |k, v|
                event.set(k,v)
            }
            event.remove("publisher_json_data")
        '
   	 }
  } else if [tw_json_data] {
        json{
                source => "tw_json_data"
                target => "tw_json_data"
                }

    ruby {
        code => '
            event.get("tw_json_data").each { |k, v|
                event.set(k,v)
            }
            event.remove("tw_json_data")
        '
         }
   }
}


output {
  if [log_type] == "work_on_task_completed" {
    http {
        http_method => post
        url => "http://monit-logs.cern.ch:10012/"
        #url => "http://localhost:9200/crabtw-%{+YYYY.MM.dd}/_doc" #this should be used to send data to local instance of ES
        content_type => "application/json; charset=UTF-8"
        format => "message"
        message => '{"hostname": "%{hostname}", "rec_timestamp":"%{rec_timestamp}", "log_file": "%{log_file}", "producer": "crab", "type": "crabtaskworker", "timestamp":"%{timestamp}", "producer_time":"%{producer_time}", "log_type":"%{log_type}", "slaveID": "%{slaveID}", "workType": "%{workType}", "taskName": "%{taskName}", "completionTime": "%{completionTime}"}'
     }
   }

  if [log_type] == "start_new_task" {
    http {
        http_method => post
        url => "http://monit-logs.cern.ch:10012/"
        #url => "http://localhost:9200/crabtw-%{+YYYY.MM.dd}/_doc"
        content_type => "application/json; charset=UTF-8"
        format => "message"
        message => '{"hostname": "%{hostname}", "rec_timestamp":"%{rec_timestamp}", "log_file": "%{log_file}", "producer": "crab", "type": "crabtaskworker", "timestamp":"%{timestamp}", "producer_time":"%{producer_time}", "log_type":"%{log_type}", "slaveID": "%{slaveID}", "functionName": "%{functionName}", "taskID": "%{taskID}", "taskName": "%{taskName}"}'
     }
   }

 if [log_type] == "successful_publication" {
    http {
        http_method => post
        url => "http://monit-logs.cern.ch:10012/"
        content_type => "application/json; charset=UTF-8"
        format => "message"
        message => '{"hostname": "%{hostname}", "rec_timestamp":"%{rec_timestamp}", "log_file": "%{log_file}", "producer": "crab", "type": "publisher", "timestamp":"%{timestamp}", "producer_time":"%{producer_time}", "log_type":"%{log_type}", "logMsg":"%{logMsg}", "taskName":"%{taskName}", "publicationResult":"%{publicationResult}", "filesPublished":"%{filesPublished}", "blocks":"%{blocks}"}'
     }
   }

  if [log_type] == "failed_publication" {
    http {
        http_method => post
        url => "http://monit-logs.cern.ch:10012/"
        content_type => "application/json; charset=UTF-8"
        format => "message"
        message => '{"hostname": "%{hostname}", "rec_timestamp":"%{rec_timestamp}", "log_file": "%{log_file}", "producer": "crab", "type": "publisher", "timestamp":"%{timestamp}", "producer_time":"%{producer_time}", "log_type":"%{log_type}", "logMsg":"%{logMsg}", "taskName":"%{taskName}", "blocks":"%{blocks}", "files":"%{files}" }'
     }
   }


  if [log_type] == "publisher_config_data" {
    http {
        http_method => post
        url => "http://monit-logs.cern.ch:10012/"
        content_type => "application/json; charset=UTF-8"
        format => "message"
        message => '{"hostname": "%{hostname}", "rec_timestamp":"%{rec_timestamp}", "log_file": "%{log_file}", "producer": "crab", "type": "publisher", "timestamp":"%{timestamp}", "producer_time":"%{producer_time}", "log_type":"%{log_type}", "logMsg":"%{logMsg}", "max_slaves":"%{max_slaves}", "dryRun":"%{dryRun}", "asoworker":"%{asoworker}", "DBShost":"%{DBShost}", "instance":"%{instance}", "version":"%{version}"}'
     }
   }


  if [log_type] == "tw_config_data" {
    http {
        http_method => post
        url => "http://monit-logs.cern.ch:10012/"
        content_type => "application/json; charset=UTF-8"
        format => "message"
        message => '{"hostname": "%{hostname}", "rec_timestamp":"%{rec_timestamp}", "log_file": "%{log_file}", "producer": "crab", "type": "crabtaskworker", "timestamp":"%{timestamp}", "producer_time":"%{producer_time}", "log_type":"%{log_type}", "logMsg":"%{logMsg}", "restHost":"%{restHost}", "name":"%{name}", "DBSHostName":"%{DBSHostName}", "instance":"%{instance}", "version":"%{version}", "dbInstance":"%{dbInstance}", "nslaves":"%{nslaves}"}'
     }
   }


  if [log_type] == "publication_error" {
    http {
        http_method => post
        url => "http://monit-logs.cern.ch:10012/"
        content_type => "application/json; charset=UTF-8"
        format => "message"
        message => '{"hostname": "%{hostname}", "rec_timestamp":"%{rec_timestamp}", "log_file": "%{log_file}", "producer": "crab", "type": "publisher", "timestamp":"%{timestamp}", "producer_time":"%{producer_time}", "log_type":"%{log_type}", "logMsg":"%{logMsg}", "exceptionHandled":"%{exceptionHandled}"  }'
     }
   }

  # this filter mathces changes in #6861, which is already in preprod and dev
  if [log_type] == "acquired_files_status" {
    http {
        http_method => post
        url => "http://monit-logs.cern.ch:10012/"
        content_type => "application/json; charset=UTF-8"
        format => "message"
        message => '{"hostname": "%{hostname}", "rec_timestamp":"%{rec_timestamp}", "log_file": "%{log_file}", "producer": "crab", "type": "publisher", "timestamp":"%{timestamp}", "producer_time":"%{producer_time}", "log_type":"%{log_type}", "logMsg":"%{logMsg}", "acquiredFiles":"%{acquiredFiles}", "taskName":"%{taskName}","acquiredFilesStatus":"%{acquiredFilesStatus}"  }'
     }
   }

  if [log_type] == "action_on_task_finished" {
    http {
        http_method => post
        url => "http://monit-logs.cern.ch:10012/"
        #url => "http://localhost:9200/crabtw-%{+YYYY.MM.dd}/_doc"
        content_type => "application/json; charset=UTF-8"
        format => "message"
        message => '{"hostname": "%{hostname}", "rec_timestamp":"%{rec_timestamp}", "log_file": "%{log_file}", "producer": "crab", "type": "crabtaskworker", "timestamp":"%{timestamp}", "producer_time":"%{producer_time}", "log_type":"%{log_type}", "action": "%{action}", "taskID": "%{taskID}","completionTime": "%{completionTime}", "taskName": "%{taskName}"}'
     }
   }

}

