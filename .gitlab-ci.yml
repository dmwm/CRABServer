---
default:
  tags:
    - crab3

variables:
  IMAGE_TAG: "${CI_COMMIT_REF_SLUG}"  # to distinct it from commit tag and final image tag

.default_rules:
  default:
    - if: $CI_COMMIT_TAG =~ /pypi-.*/         # pypi-devthree-1714418922
  release:
    - if: $CI_COMMIT_TAG =~ /v3\.[0-9]{6}.*/  # same as above

stages:
  - prepare_env
  - prepare_release
  - build_docker
  - deploy
  - run_testsuite
  - check_testsuite
  - tagging_release

# will move to child pipeline later
sync_release_from_github:
  rules:
    - if: $GITHUB_REF_NAME
  stage: prepare_env
  image:
    name: registry.cern.ch/cmscrab/buildtools
    entrypoint: [""]
  script:
    - BRANCH_NAME=${GITHUB_REF_NAME//[^a-zA-Z0-9\.\_\-]/}  # sanitize input
    - git clone https://github.com/dmwm/CRABServer --branch ${BRANCH_NAME} --single-branch CRABServer
    - cd CRABServer
    - SSH_KEY=$(cicd/gitlab/credFile.sh ${CRABINT1_SSH_KEY} ssh)
    - git config core.sshCommand "ssh -i ${SSH_KEY} -o StrictHostKeyChecking=no"
    - git remote add gitlab ssh://git@gitlab.cern.ch:7999/crab3/CRABServer.git
    - git push gitlab ${BRANCH_NAME}

get_env:
  rules:
    - !reference [.default_rules, default]
    - !reference [.default_rules, release]
  stage: prepare_env
  image:
    name: registry.cern.ch/cmscrab/buildtools
    entrypoint: [""]
  script:
    - printenv  # debug check ci env
    - cicd/gitlab/parseEnv.sh $CI_COMMIT_TAG  # create .env
  artifacts:
    paths:
      - .env
    expire_in: 1 week

# use pre_release stage
set_version_name:
  rules:
    - !reference [.default_rules, release]
  stage: prepare_release
  image:
    name: registry.cern.ch/cmscrab/buildtools
    entrypoint: [""]
  script:
    - source .env
    - |
        echo -e "\n__version__ = \"${RELEASE_NAME}\" #Automatically added during build process" >> src/python/TaskWorker/__init__.py;
    - |
        echo -e "\n__version__ = \"${RELEASE_NAME}\" #Automatically added during build process" >> src/python/CRABInterface/__init__.py;
  cache:
    - key: $CI_PIPELINE_ID
      paths:
        - src/python/TaskWorker/__init__.py
        - src/python/CRABInterface/__init__.py
      policy: push

build_rest_image:
  rules:
    - !reference [.default_rules, default]
    - !reference [.default_rules, release]
  stage: build_docker
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CMSCRAB_REGISTRY_URL\":{\"auth\":\"$(echo -n $CMSCRAB_REGISTRY_USER:$CMSCRAB_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/cicd/crabserver_pypi/Dockerfile"
      --destination "registry.cern.ch/cmscrab/crabserver:${IMAGE_TAG}"
  cache:
    - key: $CI_PIPELINE_ID
      paths:
        - src/python/CRABInterface/__init__.py
      policy: pull

build_tw_image:
  rules:
    - !reference [.default_rules, default]
    - !reference [.default_rules, release]
  stage: build_docker
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CMSCRAB_REGISTRY_URL\":{\"auth\":\"$(echo -n $CMSCRAB_REGISTRY_USER:$CMSCRAB_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - cat /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/cicd/crabtaskworker_pypi/Dockerfile"
      --destination "registry.cern.ch/cmscrab/crabtaskworker:${IMAGE_TAG}"
  cache:
    - key: $CI_PIPELINE_ID
      paths:
        - src/python/TaskWorker/__init__.py
      policy: pull

deploy_server:
  rules:
    - if: $SKIP_DEPLOY
      when: never
    - !reference [.default_rules, default]
    - !reference [.default_rules, release]
  stage: deploy
  image:
    name: registry.cern.ch/cmscrab/buildtools
    entrypoint: [""]
  script:
    # load KUBECONTEXT
    - source .env
    - echo $KUBECONFIG_FILE
    - yq -i -y ".\"current-context\" = \"$KUBECONTEXT\"" $KUBECONFIG_FILE
    - export KUBECONFIG=$KUBECONFIG_FILE
    - kubectl set image deployment/crabserver "crabserver=registry.cern.ch/cmscrab/crabserver:${IMAGE_TAG}"
    - kubectl rollout status deployment crabserver --watch --timeout=5m

.deploy_tw_template:
  rules:
    - if: $SKIP_DEPLOY
      when: never
    - !reference [.default_rules, default]
    - !reference [.default_rules, release]
  stage: deploy
  image:
    name: registry.cern.ch/cmscrab/buildtools
    entrypoint: [""]
  script:
    - source .env
    - export Environment # from .env
    - export Service="${SERVICE}"
    - export Image="${IMAGE_TAG}"
    - export SSH_KEY=$(cicd/gitlab/credFile.sh $CRAB_TW_SSH_KEY ssh)
    - bash -x cicd/gitlab/deployTW.sh

deploy_taskworker:
  extends: .deploy_tw_template
  variables:
    SERVICE: TaskWorker

deploy_publisher_schedd:
  extends: .deploy_tw_template
  variables:
    SERVICE: Publisher_schedd

deploy_publisher_rucio:
  extends: .deploy_tw_template
  variables:
    SERVICE: Publisher_rucio

task_submission_status_tracking:
  rules:
    - if: $MANUAL_CI_PIPELINE_ID
      when: never
    - if: $SUBMIT_STATUS_TRACKING
    - if: $SKIP_DEPLOY
      when: never
    - !reference [.default_rules, default]
    - !reference [.default_rules, release]
  stage: run_testsuite
  tags:
    - crab3-shell
  script:
    - source .env
    - export X509_USER_PROXY=$(cicd/gitlab/credFile.sh $X509_USER_PROXY x509)
    - export CRABClient_version=prod
    - export CRABServer_tag=HEAD
    - export REST_Instance # from .env
    - export CMSSW_release=CMSSW_13_0_2
    - export Task_Submission_Status_Tracking=true
    - bash -x cicd/gitlab/executeTests.sh
  cache:
    - key: $CI_PIPELINE_ID
      paths:
        - workdir/submitted_tasks_TS
      policy: push
    - key: submitted_tasks_TS_latest
      paths:
        - workdir/submitted_tasks_TS
      policy: push

check_test_result:
  rules:
    - if: $SUBMIT_STATUS_TRACKING
    - if: $MANUAL_CI_PIPELINE_ID
    - if: $SKIP_DEPLOY
      when: never
    - !reference [.default_rules, default]
    - !reference [.default_rules, release]
  stage: check_testsuite
  tags:
    - crab3-shell
  script:
    - source .env
    - export X509_USER_PROXY=$(cicd/gitlab/credFile.sh $X509_USER_PROXY x509)
    - export REST_Instance
    - export CMSSW_release=CMSSW_13_0_2
    - export SCRAM_ARCH=el8_amd64_gcc11
    - export Check_Publication_Status=Yes
    - export CRABClient_version=prod
    - echo ${MANUAL_CI_PIPELINE_ID}
    # manual task name
    - |
        if [[ -n "${MANUAL_TASKNAME:-}" ]]; then
            echo "${MANUAL_TASKNAME}" > workdir/submitted_tasks_TS
        fi
    - cicd/gitlab/retry.sh bash -x cicd/gitlab/executeStatusTracking.sh
  cache:
    - key: $MANUAL_CI_PIPELINE_ID
      fallback_keys:
        - $CI_PIPELINE_ID
        - submitted_tasks_TS_latest
      paths:
        - workdir/submitted_tasks_TS
      policy: pull

# if test is pass, retag with `*-stable`
release_stable:
  rules:
    - !reference [.default_rules, release]
  stage: tagging_release
  image:
    name: registry.cern.ch/cmscrab/buildtools
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  script:
    - export RELEASE_IMAGE_TAG=${RELEASE_NAME:-${CI_COMMIT_TAG}-stable}
    - crane auth login -u ${CMSCRAB_REGISTRY_USER} -p ${CMSCRAB_REGISTRY_PASSWORD} ${CMSCRAB_REGISTRY_URL}
    - crane cp registry.cern.ch/cmscrab/crabserver:${IMAGE_TAG} registry.cern.ch/cmscrab/crabserver:${RELEASE_IMAGE_TAG}
    - crane cp registry.cern.ch/cmscrab/crabtaskworker:${IMAGE_TAG} registry.cern.ch/cmscrab/crabtaskworker:${RELEASE_IMAGE_TAG}
